From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul Sauve <paul@technove.co>
Date: Wed, 20 Jan 2021 13:08:53 -0600
Subject: [PATCH] Aeroplane Configuration

Co-developed-by: Ben Kerllenevich <me@notom3ga.me>

Aeroplane
Copyright (C) 2020 Technove LLC

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

diff --git a/build.gradle.kts b/build.gradle.kts
index 7eb93902e22374644aa615f49cfbb01b052b5b40..5a7947cf5ab437eb5d62f8c73796e837e134d6c3 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -58,6 +58,12 @@ dependencies {
     implementation("net.fabricmc:mapping-io:0.3.0") // Paper - needed to read mappings for stacktrace deobfuscation
     implementation("com.velocitypowered:velocity-native:1.1.0-SNAPSHOT") // Paper
 
+    implementation("com.github.technove:AIR:fe3dbb4420") // Aeroplane - config
+    implementation("org.yaml:snakeyaml:1.28")
+    implementation ("me.carleslc.Simple-YAML:Simple-Yaml:1.7.2") { // Aeroplane - more config
+        exclude(group="org.yaml", module="snakeyaml") // exclude snakeyaml dependency because its old (1.26)
+    } // Aeroplane - more config
+
     testImplementation("io.github.classgraph:classgraph:4.8.47") // Paper - mob goal test
     testImplementation("junit:junit:4.13.1")
     testImplementation("org.hamcrest:hamcrest-library:1.3")
diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index e29b0a90019b12bd6586ad0f7b5314f307e527ba..6e8001c7ff6497c9e5c274a5fe85cc204f3ba4c5 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -228,7 +228,8 @@ public class TimingsExport extends Thread {
         parent.put("config", createObject(
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
-            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null))
+            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)), // Aeroplane
+            pair("aeroplane", mapAsJSON(gg.aeroplane.AeroplaneConfig.getConfigCopy(), null)) // Aeroplane
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index def26111f1461a54209d34f5063e65c5eb3b48e5..6cda37d340bfc6f76cbb3bdaa3ffb6d3cf90da9f 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -220,10 +220,11 @@ public class PaperConfig {
             TimingsManager.url += "/";
         }
         TimingsManager.privacy = getBoolean("timings.server-name-privacy", false);
-        TimingsManager.hiddenConfigs = getList("timings.hidden-config-entries", Lists.newArrayList("database", "settings.bungeecord-addresses", "settings.velocity-support.secret"));
+        TimingsManager.hiddenConfigs = getList("timings.hidden-config-entries", Lists.newArrayList("database", "settings.bungeecord-addresses", "settings.velocity-support.secret", "web-services.token")); // Aeroplane
         if (!TimingsManager.hiddenConfigs.contains("settings.velocity-support.secret")) {
             TimingsManager.hiddenConfigs.add("settings.velocity-support.secret");
         }
+        if (!TimingsManager.hiddenConfigs.contains("web-services.token")) TimingsManager.hiddenConfigs.add("web-services.token"); // Aeroplane
         int timingHistoryInterval = getInt("timings.history-interval", 300);
         int timingHistoryLength = getInt("timings.history-length", 3600);
         timingsServerName = getString("timings.server-name", "Unknown Server");
diff --git a/src/main/java/gg/aeroplane/AeroplaneCommand.java b/src/main/java/gg/aeroplane/AeroplaneCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..89c89e633f14b5820147e734b1b7ad8cadfdce80
--- /dev/null
+++ b/src/main/java/gg/aeroplane/AeroplaneCommand.java
@@ -0,0 +1,65 @@
+package gg.aeroplane;
+
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.md_5.bungee.api.ChatColor;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+import java.io.IOException;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class AeroplaneCommand extends Command {
+
+    public AeroplaneCommand() {
+        super("aeroplane");
+        this.description = "Aeroplane related commands";
+        this.usageMessage = "/aeroplane [reload | version]";
+        this.setPermission("bukkit.command.aeroplane");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return Stream.of("reload", "version")
+              .filter(arg -> arg.startsWith(args[0].toLowerCase()))
+              .collect(Collectors.toList());
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+        String prefix = ChatColor.of("#6a7eda") + "" + ChatColor.BOLD + "Aeroplane âœˆ " + ChatColor.of("#e8ebf9");
+
+        if (args.length != 1) {
+            sender.sendMessage(prefix + "Usage: " + usageMessage);
+            args = new String[]{"version"};
+        }
+
+        if (args[0].equalsIgnoreCase("reload")) {
+            MinecraftServer console = MinecraftServer.getServer();
+            try {
+                AeroplaneConfig.load();
+            } catch (IOException e) {
+                sender.sendMessage(Component.text("Failed to reload.", NamedTextColor.RED));
+                e.printStackTrace();
+                return true;
+            }
+            console.server.reloadCount++;
+
+            Command.broadcastCommandMessage(sender, prefix + "Aeroplane configuration has been reloaded.");
+        } else if (args[0].equalsIgnoreCase("version")) {
+            Command.broadcastCommandMessage(sender, prefix + "This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ")");
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/gg/aeroplane/AeroplaneConfig.java b/src/main/java/gg/aeroplane/AeroplaneConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..8e714f112c6fa37eb92398a9d7d7f7b8b48c3832
--- /dev/null
+++ b/src/main/java/gg/aeroplane/AeroplaneConfig.java
@@ -0,0 +1,171 @@
+package gg.aeroplane;
+
+import co.technove.air.AIR;
+import co.technove.air.ValueType;
+import net.minecraft.server.MinecraftServer;
+import org.apache.logging.log4j.Level;
+import org.bukkit.configuration.Configuration;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.MemoryConfiguration;
+import org.bukkit.configuration.MemorySection;
+import org.jetbrains.annotations.Nullable;
+import org.simpleyaml.configuration.comments.CommentType;
+import org.simpleyaml.configuration.file.YamlFile;
+import org.simpleyaml.exceptions.InvalidConfigurationException;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+
+public class AeroplaneConfig {
+
+    private static @Nullable AIR oldConfig;
+    private static final YamlFile config = new YamlFile();
+    private static int updates = 0;
+
+    private static ConfigurationSection convertToBukkit(org.simpleyaml.configuration.ConfigurationSection section) {
+        ConfigurationSection newSection = new MemoryConfiguration();
+        for (String key : section.getKeys(false)) {
+            if (section.isConfigurationSection(key)) {
+                newSection.set(key, convertToBukkit(section.getConfigurationSection(key)));
+            } else {
+                newSection.set(key, section.get(key));
+            }
+        }
+        return newSection;
+    }
+
+    public static ConfigurationSection getConfigCopy() {
+        return convertToBukkit(config);
+    }
+
+    public static int getUpdates() {
+        return updates;
+    }
+
+    public static void load() throws IOException {
+        File oldConfigFile = new File("aeroplane.air");
+        File configFile = new File("aeroplane.yml");
+        if (oldConfigFile.exists() && !configFile.exists()) {
+            try (FileInputStream inputStream = new FileInputStream(oldConfigFile)) {
+                oldConfig = new AIR(inputStream);
+            }
+        }
+
+        if (configFile.exists()) {
+            try {
+                config.load(configFile);
+            } catch (InvalidConfigurationException e) {
+                throw new IOException(e);
+            }
+        }
+
+        getString("info.version", "1.0");
+        setComment("info",
+                "Aeroplane Configuration",
+                "Read https://blog.aeroplane.gg/ to find out more about Aeroplane",
+                "Join our Discord to receive support & optimization help: https://discord.gg/3gtc45q");
+
+        for (Method method : AeroplaneConfig.class.getDeclaredMethods()) {
+            if (Modifier.isStatic(method.getModifiers()) && Modifier.isPrivate(method.getModifiers()) && method.getParameterCount() == 0 &&
+                    method.getReturnType() == Void.TYPE && !method.getName().startsWith("lambda")) {
+                method.setAccessible(true);
+                try {
+                    method.invoke(null);
+                } catch (Throwable t) {
+                    MinecraftServer.LOGGER.log(Level.WARN, "Failed to load configuration option from " + method.getName(), t);
+                }
+            }
+        }
+
+        updates++;
+
+        config.save(configFile);
+        oldConfig = null;
+
+        if (oldConfigFile.exists()) {
+            oldConfigFile.renameTo(new File("aeroplane.air.old"));
+        }
+    }
+
+    private static void setComment(String key, String... comment) {
+        if (config.contains(key)) {
+            config.setComment(key, String.join("\n", comment), CommentType.BLOCK);
+        }
+    }
+
+    private static void ensureDefault(String key, Object defaultValue, String... comment) {
+        if (!config.contains(key)) {
+            config.set(key, defaultValue);
+            config.setComment(key, String.join("\n", comment), CommentType.BLOCK);
+        }
+    }
+
+    private static boolean getBoolean(String key, boolean defaultValue, String... comment) {
+        return getBoolean(key, null, defaultValue, comment);
+    }
+
+    private static boolean getBoolean(String key, @Nullable String oldKey, boolean defaultValue, String... comment) {
+        if (oldConfig != null) {
+            defaultValue = oldConfig.getBoolean(oldKey == null ? key : oldKey, defaultValue);
+        }
+        ensureDefault(key, defaultValue, comment);
+        return config.getBoolean(key, defaultValue);
+    }
+
+    private static int getInt(String key, int defaultValue, String... comment) {
+        return getInt(key, null, defaultValue, comment);
+    }
+
+    private static int getInt(String key, @Nullable String oldKey, int defaultValue, String... comment) {
+        if (oldConfig != null) {
+            defaultValue = oldConfig.getInt(oldKey == null ? key : oldKey, defaultValue);
+        }
+        ensureDefault(key, defaultValue, comment);
+        return config.getInt(key, defaultValue);
+    }
+
+    private static double getDouble(String key, double defaultValue, String... comment) {
+        return getDouble(key, null, defaultValue, comment);
+    }
+
+    private static double getDouble(String key, @Nullable String oldKey, double defaultValue, String... comment) {
+        if (oldConfig != null) {
+            defaultValue = oldConfig.getDouble(oldKey == null ? key : oldKey, defaultValue);
+        }
+        ensureDefault(key, defaultValue, comment);
+        return config.getDouble(key, defaultValue);
+    }
+
+    private static String getString(String key, String defaultValue, String... comment) {
+        return getOldString(key, null, defaultValue, comment);
+    }
+
+    private static String getOldString(String key, @Nullable String oldKey, String defaultValue, String... comment) {
+        if (oldConfig != null) {
+            defaultValue = oldConfig.getString(oldKey == null ? key : oldKey, defaultValue);
+        }
+        ensureDefault(key, defaultValue, comment);
+        return config.getString(key, defaultValue);
+    }
+
+    private static List<String> getStringList(String key, List<String> defaultValue, String... comment) {
+        return getStringList(key, null, defaultValue, comment);
+    }
+
+    private static List<String> getStringList(String key, @Nullable String oldKey, List<String> defaultValue, String... comment) {
+        if (oldConfig != null) {
+            try {
+                defaultValue = oldConfig.getList(oldKey != null ? oldKey : key, ValueType.STRING, defaultValue);
+            } catch (IOException e) {
+            }
+        }
+        ensureDefault(key, defaultValue, comment);
+        return config.getStringList(key);
+    }
+
+
+}
diff --git a/src/main/java/gg/aeroplane/commands/AeroplaneCommands.java b/src/main/java/gg/aeroplane/commands/AeroplaneCommands.java
new file mode 100644
index 0000000000000000000000000000000000000000..807cf274619b8f7be839e249cb62b9817876ca04
--- /dev/null
+++ b/src/main/java/gg/aeroplane/commands/AeroplaneCommands.java
@@ -0,0 +1,10 @@
+package gg.aeroplane.commands;
+
+import gg.aeroplane.AeroplaneCommand;
+import net.minecraft.server.MinecraftServer;
+
+public class AeroplaneCommands {
+    public static void init() {
+        MinecraftServer.getServer().server.getCommandMap().register("aeroplane", "Aeroplane", new AeroplaneCommand());
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index b6ee0e709b0f0529b99567bc9b8fb6bfd99bcd8e..e2901132b78126c0a4eb04363dfe6a0dccd1313f 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -234,6 +234,8 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         io.papermc.paper.util.ObfHelper.INSTANCE.getClass(); // load mappings for stacktrace deobf and etc.
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
+        gg.aeroplane.AeroplaneConfig.load(); // Aeroplane - config
+        gg.aeroplane.commands.AeroplaneCommands.init(); // Aeroplane - command
 
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
