From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul <paul@technove.co>
Date: Tue, 28 Sep 2021 13:45:55 -0500
Subject: [PATCH] Sentry Logging Support


diff --git a/build.gradle.kts b/build.gradle.kts
index a768d483d9bd90b8a6116c3890e2f5cde2363e49..889aa2d4fbdd85db00c6d711181cb1832fd9daa5 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -65,6 +65,8 @@ dependencies {
     } // Aeroplane - more config
     implementation("com.github.technove:Flare:2c4a2114a0") // Aeroplane - flare
 
+    implementation("io.sentry:sentry:5.4.0") // Aeroplane
+
     testImplementation("io.github.classgraph:classgraph:4.8.47") // Paper - mob goal test
     testImplementation("junit:junit:4.13.1")
     testImplementation("org.hamcrest:hamcrest-library:1.3")
diff --git a/src/main/java/gg/aeroplane/AeroplaneConfig.java b/src/main/java/gg/aeroplane/AeroplaneConfig.java
index 2b654e6adfe331a5fa68c1aea7d6d6cea1f3567d..f34327d578ea8acfd4bb8f6f933af5d4f0f49c90 100644
--- a/src/main/java/gg/aeroplane/AeroplaneConfig.java
+++ b/src/main/java/gg/aeroplane/AeroplaneConfig.java
@@ -2,6 +2,7 @@ package gg.aeroplane;
 
 import co.technove.air.AIR;
 import co.technove.air.ValueType;
+import io.sentry.Sentry;
 import net.minecraft.core.Registry;
 import gg.aeroplane.flare.FlareCommand;
 import net.minecraft.server.MinecraftServer;
@@ -253,5 +254,33 @@ public class AeroplaneConfig {
         config.setComment("misc", "Settings for things that don't belong elsewhere");
     }
 
+    public static boolean usingSentry = false;
+    public static Level sentryLevel;
+
+    private static void sentrySetup() {
+        if (Sentry.isEnabled()) {
+            Sentry.endSession();
+            Sentry.close();
+        }
+
+        String sentryDsn = getString("sentry.dsn", "");
+        if (sentryDsn.isEmpty()) {
+            usingSentry = false;
+            Sentry.close();
+            return;
+        }
+
+        sentryLevel = Level.valueOf(getString("sentry.log-level", Level.WARN.name()));
+
+        usingSentry = true;
+        Sentry.init(sentryDsn);
+    }
+
+    public static void reportException(Throwable e) {
+        if (usingSentry) {
+            Sentry.captureException(e);
+        }
+    }
+
 
 }
diff --git a/src/main/java/gg/aeroplane/AeroplaneSentryAppender.java b/src/main/java/gg/aeroplane/AeroplaneSentryAppender.java
new file mode 100644
index 0000000000000000000000000000000000000000..eb83e44fc384e1b17291066d58512803834bf4ed
--- /dev/null
+++ b/src/main/java/gg/aeroplane/AeroplaneSentryAppender.java
@@ -0,0 +1,35 @@
+package gg.aeroplane;
+
+import io.sentry.Sentry;
+import org.apache.logging.log4j.core.Appender;
+import org.apache.logging.log4j.core.Core;
+import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.appender.AbstractAppender;
+import org.apache.logging.log4j.core.config.plugins.Plugin;
+import org.apache.logging.log4j.core.config.plugins.PluginFactory;
+
+@Plugin(
+        name = "AeroplaneSentry",
+        category = Core.CATEGORY_NAME,
+        elementType = Appender.ELEMENT_TYPE
+)
+public class AeroplaneSentryAppender extends AbstractAppender {
+    protected AeroplaneSentryAppender() {
+        super("AeroplaneSentry", null, null);
+    }
+
+    @Override
+    public void append(LogEvent event) {
+        if (AeroplaneConfig.usingSentry && event.getLevel().isMoreSpecificThan(AeroplaneConfig.sentryLevel)) {
+            Throwable thrown = event.getThrown();
+            if (thrown != null) {
+                Sentry.captureException(thrown);
+            }
+        }
+    }
+
+    @PluginFactory
+    public static AeroplaneSentryAppender createAppender() {
+        return new AeroplaneSentryAppender();
+    }
+}
diff --git a/src/main/java/net/minecraft/CrashReport.java b/src/main/java/net/minecraft/CrashReport.java
index b9a618eba86656289e20d051c3f0023ec93bb733..1233c2d6b58a36a87e84cc73de7a71980431b9ca 100644
--- a/src/main/java/net/minecraft/CrashReport.java
+++ b/src/main/java/net/minecraft/CrashReport.java
@@ -30,6 +30,7 @@ public class CrashReport {
     private final SystemReport systemReport = new SystemReport();
 
     public CrashReport(String message, Throwable cause) {
+        gg.aeroplane.AeroplaneConfig.reportException(cause); // Aeroplane
         io.papermc.paper.util.StacktraceDeobfuscator.INSTANCE.deobfuscateThrowable(cause); // Paper
         this.title = message;
         this.exception = cause;
diff --git a/src/main/resources/log4j2.xml b/src/main/resources/log4j2.xml
index 74ccc67e3c12dc5182602fb691ef3ddeb5b53280..77d71eaac32a2d33d7659134114c79415da64cd8 100644
--- a/src/main/resources/log4j2.xml
+++ b/src/main/resources/log4j2.xml
@@ -42,6 +42,7 @@
             <AppenderRef ref="TerminalConsole" level="info"/>
             <AppenderRef ref="ServerGuiConsole" level="info"/>
         </Rewrite>
+        <AeroplaneSentry />
     </Appenders>
     <Loggers>
         <Root level="info">
@@ -49,6 +50,7 @@
                 <MarkerFilter marker="NETWORK_PACKETS" onMatch="DENY" onMismatch="NEUTRAL" />
             </filters>
             <AppenderRef ref="Async"/>
+            <AppenderRef ref="AeroplaneSentry"/>
         </Root>
     </Loggers>
 </Configuration>
