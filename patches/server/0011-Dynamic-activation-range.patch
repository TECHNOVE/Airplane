From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul Sauve <paul@technove.co>
Date: Fri, 15 Jan 2021 19:05:01 -0600
Subject: [PATCH] Dynamic activation range

This replaces the current method of ticking an inactive entity's
pathfinder 1/4 times with a new method that's dynamic based off how far
away it is from a player. If an entity is within 32 blocks, it gets
ticked every tick. If it's within 45 blocks, it gets ticked every other
tick. If it's within 55 blocks, it gets ticked once every three ticks.
(these numbers have since been changed, but the idea is the same.)

Airplane
Copyright (C) 2020 Technove LLC

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

diff --git a/src/main/java/gg/airplane/AirplaneConfig.java b/src/main/java/gg/airplane/AirplaneConfig.java
index f6eac82ba8b6ca6ebaff12522da7e1bd63a7efb3..32082ff3737770161f8b76f28a1da27dffc6bb21 100644
--- a/src/main/java/gg/airplane/AirplaneConfig.java
+++ b/src/main/java/gg/airplane/AirplaneConfig.java
@@ -1,7 +1,15 @@
 package gg.airplane;
 
 import co.technove.air.AIR;
+import co.technove.air.ValueType;
+import com.google.common.collect.ImmutableList;
+import io.papermc.paper.util.ObfHelper;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.entity.ai.behavior.VillagerPanicTrigger;
+import net.minecraft.world.entity.ai.sensing.GolemSensor;
+import net.minecraft.world.entity.ai.sensing.HurtBySensor;
+import net.minecraft.world.entity.ai.sensing.NearestLivingEntitySensor;
+import net.minecraft.world.entity.ai.sensing.VillagerHostilesSensor;
 import org.apache.logging.log4j.Level;
 
 import java.io.File;
@@ -10,6 +18,11 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Optional;
+import java.util.Set;
+import java.util.stream.Collectors;
 
 public class AirplaneConfig {
 
@@ -66,4 +79,85 @@ public class AirplaneConfig {
     }
 
 
+    public static boolean dearEnabled;
+    public static int startDistance;
+    public static int startDistanceSquared;
+    public static int maximumActivationPrio;
+    public static int activationDistanceMod;
+    public static boolean dynamicVillagerBehavior;
+    public static boolean dynamicPiglinBehavior;
+    public static boolean dynamicHoglinBehavior;
+    public static Set<Class<?>> fullyTickBehaviors = new HashSet<>();
+    public static Set<Class<?>> fullyTickSensors = new HashSet<>();
+
+    private static Optional<Class<?>> tryFindClass(String name, String packagePath) {
+        Map<String, ObfHelper.ClassMapping> mappings = ObfHelper.INSTANCE.getMojangToSpigot();
+        ObfHelper.ClassMapping classMapping = mappings == null ? null : mappings.get(packagePath + name);
+
+        try {
+            return Optional.of(Class.forName(packagePath + name));
+        } catch (ClassNotFoundException e) {
+            if (classMapping == null) {
+                MinecraftServer.LOGGER.warn("Failed to find '" + packagePath + name + "'");
+                return Optional.empty();
+            }
+        }
+
+        try {
+            return Optional.of(Class.forName(classMapping.obfName()));
+        } catch (ClassNotFoundException e) {
+            MinecraftServer.LOGGER.warn("Failed to find '" + classMapping.obfName() + "'");
+            return Optional.empty();
+        }
+    }
+
+    private static void dynamicActivationRange() {
+        config.setComment("activation-range", "Optimizes how entities act when", "they're far away from the player");
+
+        dearEnabled = config.getBoolean("activation-range.enabled", true);
+        startDistance = config.getInt("activation-range.start-distance", 12,
+                "This value determines how far away an entity has to be",
+                "from the player to start being effected by DEAR.");
+        startDistanceSquared = startDistance * startDistance;
+        maximumActivationPrio = config.getInt("activation-range.max-tick-freq", 20,
+                "This value defines how often in ticks, the furthest entity",
+                "will get their pathfinders and behaviors ticked. 20 = 1s");
+        activationDistanceMod = config.getInt("activation-range.activation-dist-mod", 8,
+                "This value defines how much distance modifies an entity's",
+                "tick frequency. freq = (distanceToPlayer^2) / (2^value)",
+                "If you want further away entities to tick less often, use 7.",
+                "If you want further away entities to tick more often, try 9.");
+
+        config.setComment("behavior-activation", "A list of entities to use the dynamic activation range", "to modify how often their behaviors are ticked");
+
+        dynamicVillagerBehavior = config.getBoolean("behavior-activation.villager", true);
+        dynamicPiglinBehavior = config.getBoolean("behavior-activation.piglin", true);
+        dynamicHoglinBehavior = config.getBoolean("behavior-activation.hoglin", true);
+
+
+        try {
+            fullyTickBehaviors = config.getList("behavior-activation.fully-tick-behaviors", ValueType.STRING, ImmutableList.of(VillagerPanicTrigger.class.getSimpleName()))
+                    .stream()
+                    .map(str -> tryFindClass(str, "net.minecraft.world.entity.ai.behavior."))
+                    .filter(Optional::isPresent)
+                    .map(Optional::get)
+                    .collect(Collectors.toUnmodifiableSet());
+
+            fullyTickSensors = config.getList("behavior-activation.fully-tick-sensors", ValueType.STRING, ImmutableList.of(
+                            VillagerHostilesSensor.class.getSimpleName(),
+                            HurtBySensor.class.getSimpleName(),
+                            GolemSensor.class.getSimpleName(),
+                            NearestLivingEntitySensor.class.getSimpleName()
+                    ))
+                    .stream()
+                    .map(str -> tryFindClass(str, "net.minecraft.world.entity.ai.sensing."))
+                    .filter(Optional::isPresent)
+                    .map(Optional::get)
+                    .collect(Collectors.toUnmodifiableSet());
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+
 }
diff --git a/src/main/java/io/papermc/paper/util/ObfHelper.java b/src/main/java/io/papermc/paper/util/ObfHelper.java
index 271e0a2ec549836a32565bb9100d432cd68d6046..bad3df1eaf4efbb3b3e4b7e89c36b421cafb8746 100644
--- a/src/main/java/io/papermc/paper/util/ObfHelper.java
+++ b/src/main/java/io/papermc/paper/util/ObfHelper.java
@@ -24,26 +24,29 @@ public enum ObfHelper {
     public static final String SPIGOT_NAMESPACE = "spigot";
 
     private final @Nullable Map<String, ClassMapping> mappings;
+    private @Nullable Map<String, ClassMapping> mojangToSpigot; public @Nullable Map<String, ClassMapping> getMojangToSpigot() { return this.mojangToSpigot; } // Airplane
 
     ObfHelper() {
-        this.mappings = loadMappingsIfPresent();
+        this.mappings = loadMappingsIfPresent(this); // Airplane
     }
 
     public @Nullable Map<String, ClassMapping> mappings() {
         return this.mappings;
     }
 
-    private static @Nullable Map<String, ClassMapping> loadMappingsIfPresent() {
+    private static @Nullable Map<String, ClassMapping> loadMappingsIfPresent(ObfHelper helper) { // Airplane
         try (final @Nullable InputStream mappingsInputStream = StacktraceDeobfuscator.class.getClassLoader().getResourceAsStream("META-INF/mappings/reobf.tiny")) {
             if (mappingsInputStream == null) {
                 return null;
             }
             final TinyTree tree = TinyMappingFactory.loadWithDetection(new BufferedReader(new InputStreamReader(mappingsInputStream, Charsets.UTF_8)));
             final var builder = ImmutableMap.<String, ClassMapping>builder();
+            final var mojangToSpigotBuilder = ImmutableMap.<String, ClassMapping>builder(); // Airplane
 
             for (final ClassDef classDef : tree.getClasses()) {
                 final String obfClassName = classDef.getName(SPIGOT_NAMESPACE).replace('/', '.');
                 final var methodMappings = ImmutableMap.<Pair<String, String>, MethodMapping>builder();
+                final var mojangToSpigotMethodMappings = ImmutableMap.<Pair<String, String>, MethodMapping>builder(); // Airplane
 
                 for (final MethodDef methodDef : classDef.getMethods()) {
                     final MethodMapping method = new MethodMapping(
@@ -55,6 +58,12 @@ public enum ObfHelper {
                         new Pair<>(method.obfName(), method.descriptor()),
                         method
                     );
+                    // Airplane start
+                    mojangToSpigotMethodMappings.put(
+                        new Pair<>(method.mojangName(), method.descriptor),
+                        method
+                    );
+                    // Airplane end
                 }
 
                 final ClassMapping map = new ClassMapping(
@@ -63,8 +72,10 @@ public enum ObfHelper {
                     methodMappings.build()
                 );
                 builder.put(map.obfName(), map);
+                mojangToSpigotBuilder.put(map.mojangName(), map); // Airplane
             }
 
+            helper.mojangToSpigot = mojangToSpigotBuilder.build(); // Airplane
             return builder.build();
         } catch (final IOException ex) {
             System.err.println("Failed to load mappings for stacktrace deobfuscation.");
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 8d7fe80d3a8bf49b5dda3b9f46754dc2559ade2f..81f0fa59d32234399247f7d74a3a6673f91493a7 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -336,6 +336,9 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
     protected int numCollisions = 0; // Paper
     public void inactiveTick() { }
     // Spigot end
+    // Airplane start
+    public int activatedPriority = gg.airplane.AirplaneConfig.maximumActivationPrio; // golf score
+    // Airplane end
 
     public float getBukkitYaw() {
         return this.yRot;
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 4b7a7ddccb50a89b25f67e0f1f540476e4aaa33e..f0415c76f52f124b3060505d0d4269d941d4f490 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -211,10 +211,10 @@ public abstract class Mob extends LivingEntity {
     @Override
     public void inactiveTick() {
         super.inactiveTick();
-        if (this.goalSelector.inactiveTick()) {
+        if (this.goalSelector.inactiveTick(this.activatedPriority, true)) { // Airplane - pass activated priroity
             this.goalSelector.tick();
         }
-        if (this.targetSelector.inactiveTick()) {
+        if (this.targetSelector.inactiveTick(this.activatedPriority, true)) { // Airplane - pass activated priority
             this.targetSelector.tick();
         }
     }
@@ -875,9 +875,11 @@ public abstract class Mob extends LivingEntity {
         this.sensing.tick();
         this.level.getProfiler().pop();
         this.level.getProfiler().push("targetSelector");
+        if (this.targetSelector.inactiveTick(this.activatedPriority, false)) // Airplane - use this to alternate ticking
         this.targetSelector.tick();
         this.level.getProfiler().pop();
         this.level.getProfiler().push("goalSelector");
+        if (this.goalSelector.inactiveTick(this.activatedPriority, false)) // Airplane - use this to alternate ticking
         this.goalSelector.tick();
         this.level.getProfiler().pop();
         this.level.getProfiler().push("navigation");
diff --git a/src/main/java/net/minecraft/world/entity/ai/Brain.java b/src/main/java/net/minecraft/world/entity/ai/Brain.java
index a7c71fc4e49079d11b9a0537a4f6d20bbbba815b..f4286c12390b1a1617b839a51f8173f146692534 100644
--- a/src/main/java/net/minecraft/world/entity/ai/Brain.java
+++ b/src/main/java/net/minecraft/world/entity/ai/Brain.java
@@ -366,6 +366,7 @@ public class Brain<E extends LivingEntity> {
         return brain;
     }
 
+    public boolean needsFullTick = true; // Airplane
     public void tick(ServerLevel world, E entity) {
         this.forgetOutdatedMemories();
         this.tickSensors(world, entity);
@@ -375,6 +376,7 @@ public class Brain<E extends LivingEntity> {
 
     private void tickSensors(ServerLevel world, E entity) {
         for(Sensor<? super E> sensor : this.sensors.values()) {
+            if (this.needsFullTick || sensor.alwaysFullyTick()) // Airplane
             sensor.tick(world, entity);
         }
 
@@ -410,7 +412,7 @@ public class Brain<E extends LivingEntity> {
                 Activity activity = entry.getKey();
                 if (this.activeActivities.contains(activity)) {
                     for(Behavior<? super E> behavior : entry.getValue()) {
-                        if (behavior.getStatus() == Behavior.Status.STOPPED) {
+                        if ((this.needsFullTick || behavior.alwaysFullyTick()) && behavior.getStatus() == Behavior.Status.STOPPED) { // Airplane
                             behavior.tryStart(world, entity, l);
                         }
                     }
@@ -424,6 +426,7 @@ public class Brain<E extends LivingEntity> {
         long l = world.getGameTime();
 
         for(Behavior<? super E> behavior : this.getRunningBehaviors()) {
+            if (this.needsFullTick || behavior.alwaysFullyTick()) // Airplane
             behavior.tickOrStop(world, entity, l);
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
index b1928807851a4fca53e117573b25c62a6deeb8e1..3f97773ae584d52541a44f61f695178876ab3e86 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
@@ -49,6 +49,18 @@ public abstract class Behavior<E extends LivingEntity> {
         // Paper end
     }
 
+    // Airplane start
+    private boolean fullyTick = false;
+    private int lastUpdateChecked = -1;
+    public boolean alwaysFullyTick() {
+        if (this.lastUpdateChecked != gg.airplane.AirplaneConfig.getUpdates()) {
+            this.lastUpdateChecked = gg.airplane.AirplaneConfig.getUpdates();
+            this.fullyTick = gg.airplane.AirplaneConfig.fullyTickBehaviors.contains(getClass());
+        }
+        return this.fullyTick;
+    }
+    // Airplane end
+
     public Behavior.Status getStatus() {
         return this.status;
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerPanicTrigger.java b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerPanicTrigger.java
index 42d466f7f162943886078eba3db18f2dfc2d7bee..73509aa6ed66188b9ed3d3611392525c1099e363 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerPanicTrigger.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerPanicTrigger.java
@@ -37,7 +37,10 @@ public class VillagerPanicTrigger extends Behavior<Villager> {
 
     @Override
     protected void tick(ServerLevel serverLevel, Villager villager, long l) {
-        if (l % 100L == 0L) {
+        // Airplane start
+        if (villager.nextGolemPanic < 0) villager.nextGolemPanic = l + 100;
+        if (--villager.nextGolemPanic <= l) {
+            // Airplane end
             villager.spawnGolemIfNeeded(serverLevel, l, 3);
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java b/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
index faa53d08a12cc7441c670cae6d301de3f498ffe7..b17f401d723b1466a3b7e05da3dfeebd5cf763c7 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/GoalSelector.java
@@ -49,9 +49,12 @@ public class GoalSelector {
     }
 
     // Paper start
-    public boolean inactiveTick() {
+    public boolean inactiveTick(int tickRate, boolean inactive) { // Airplane start
+        if (inactive && !gg.airplane.AirplaneConfig.dearEnabled) tickRate = 4; // reset to Paper's
+        tickRate = Math.min(tickRate, this.newGoalRate);
         this.curRate++;
-        return this.curRate % this.newGoalRate == 0;
+        return this.curRate % tickRate == 0;
+        // Airplane end
     }
     public boolean hasTasks() {
         for (WrappedGoal task : this.availableGoals) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
index 8f99a78a55ab8f0ddfa1dd790a9a4a8c23a7f841..f2882d17dbbb59944c8ed831e85ecb7ba17700fb 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
@@ -49,6 +49,18 @@ public abstract class Sensor<E extends LivingEntity> {
         this(20);
     }
 
+    // Airplane start
+    private boolean fullyTick = false;
+    private int lastUpdateChecked = -1;
+    public boolean alwaysFullyTick() {
+        if (this.lastUpdateChecked != gg.airplane.AirplaneConfig.getUpdates()) {
+            this.lastUpdateChecked = gg.airplane.AirplaneConfig.getUpdates();
+            this.fullyTick = gg.airplane.AirplaneConfig.fullyTickSensors.contains(getClass());
+        }
+        return this.fullyTick;
+    }
+    // Airplane end
+
     public final void tick(ServerLevel world, E entity) {
         if (--this.timeToTick <= 0L) {
             // Paper start - configurable sensor tick rate and timings
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index 80c0e17f49b6d8f060122eed5bc6d67299ad3f5c..ff83b639cf36e75f7d3c14173d941d84f9fff531 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -302,9 +302,11 @@ public class Axolotl extends Animal implements LerpingModel, Bucketable {
         return true;
     }
 
+    private int behaviorTick = 0; // Airplane
     @Override
     protected void customServerAiStep() {
         this.level.getProfiler().push("axolotlBrain");
+        this.getBrain().needsFullTick = this.behaviorTick++ % this.activatedPriority == 0; // Airplane
         this.getBrain().tick((ServerLevel) this.level, this); // CraftBukkit - decompile error
         this.level.getProfiler().pop();
         this.level.getProfiler().push("axolotlActivityUpdate");
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index ca62d4adafc3195541665192888feac91312d71a..86b7619c4323dee786ce5e9a95b1019eb1b9f272 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -166,11 +166,14 @@ public class Goat extends Animal {
         return (Brain<Goat>) super.getBrain(); // CraftBukkit - decompile error
     }
 
+    private int behaviorTick = 0; // Airplane
     @Override
     protected void customServerAiStep() {
         this.level.getProfiler().push("goatBrain");
-        if (getRider() == null) // Purpur - only use brain if no rider
-        this.getBrain().tick((ServerLevel) this.level, this); // CraftBukkit - decompile error
+        if (getRider() == null) { // Purpur - only use brain if no rider
+            this.getBrain().needsFullTick = this.behaviorTick++ % this.activatedPriority == 0; // Airplane
+            this.getBrain().tick((ServerLevel) this.level, this); // CraftBukkit - decompile error
+        }
         this.level.getProfiler().pop();
         this.level.getProfiler().push("goatActivityUpdate");
         GoatAi.updateActivity(this);
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index f1f14f5de59732478753e38c5c51536fe246a053..964212296321eb952f14f47e6992870e618006b4 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -148,11 +148,14 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
         return (Brain<Hoglin>) super.getBrain(); // Airplane - decompile fix
     }
 
+    private int behaviorTick; // Airplane
     @Override
     protected void customServerAiStep() {
         this.level.getProfiler().push("hoglinBrain");
-        if (getRider() == null) // Purpur - only use brain if no rider
-        this.getBrain().tick((ServerLevel)this.level, this);
+        if (getRider() == null) { // Purpur - only use brain if no rider
+            this.getBrain().needsFullTick = this.behaviorTick++ % this.activatedPriority == 0; // Airplane
+            this.getBrain().tick((ServerLevel) this.level, this);
+        }
         this.level.getProfiler().pop();
         HoglinAi.updateActivity(this);
         if (this.isConverting()) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index cdb797f23b4460a24a090d3983debcc523913943..bf1ff25ab732dd57ed916988c007aa18a20ea894 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -306,11 +306,14 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
         return !this.cannotHunt;
     }
 
+    private int behaviorTick; // Airplane
     @Override
     protected void customServerAiStep() {
         this.level.getProfiler().push("piglinBrain");
-        if (getRider() == null) // Purpur - only use brain if no rider
-        this.getBrain().tick((ServerLevel) this.level, (Piglin) this); // CraftBukkit - decompile error
+        if (getRider() == null) { // Purpur - only use brain if no rider
+            this.getBrain().needsFullTick = !gg.airplane.AirplaneConfig.dynamicPiglinBehavior || this.behaviorTick++ % this.activatedPriority == 0; // Airplane
+            this.getBrain().tick((ServerLevel) this.level, (Piglin) this); // CraftBukkit - decompile error
+        }
         this.level.getProfiler().pop();
         PiglinAi.updateActivity(this);
         super.customServerAiStep();
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index b649ef2c96beeb6c2d98f54375bbeb1159c7f4ba..e224db6b52c2b26ce65ff2491fed18d1b2001efc 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -144,6 +144,8 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     private final int brainTickOffset; // Purpur
     boolean lobotomized = false; // Purpur
 
+    public long nextGolemPanic = -1; // Airplane
+
     public Villager(EntityType<? extends Villager> entityType, Level world) {
         this(entityType, world, VillagerType.PLAINS);
     }
@@ -292,6 +294,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
     // Spigot End
 
+    private int behaviorTick = 0; // Airplane
     @Override
     protected void customServerAiStep() { mobTick(false); }
     protected void mobTick(boolean inactive) {
@@ -301,7 +304,12 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         boolean tick = (level.getGameTime() + brainTickOffset) % level.purpurConfig.villagerBrainTicks == 0;
         if (((ServerLevel) level).getServer().lagging ? tick : level.purpurConfig.villagerUseBrainTicksOnlyWhenLagging || tick)
         // Purpur end
-        if (!inactive) this.getBrain().tick((ServerLevel) this.level, this); // CraftBukkit - decompile error // Paper
+        // Airplane start
+        if (!inactive) {
+            this.getBrain().needsFullTick = !gg.airplane.AirplaneConfig.dynamicVillagerBehavior || behaviorTick++ % this.activatedPriority == 0;
+            this.getBrain().tick((ServerLevel) this.level, this);
+         }
+        // Airplane end
         else if (shouldRestock()) restock(); // Purpur
         this.level.getProfiler().pop();
         if (this.assignProfessionWhenSpawned) {
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 3cfca02792f48e917dc445e2d32e7c18556c151b..8cfabed7e20dab7d334697252f6a92a836499d90 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -38,6 +38,10 @@ import co.aikar.timings.MinecraftTimings;
 import net.minecraft.world.entity.schedule.Activity;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.AABB;
+// Airplane start
+import net.minecraft.world.phys.Vec3;
+import java.util.List;
+// Airplane end
 
 public class ActivationRange
 {
@@ -212,6 +216,21 @@ public class ActivationRange
             for (int i = 0; i < entities.size(); i++) {
                 Entity entity = entities.get(i);
                 ActivationRange.activateEntity(entity);
+
+                // Airplane start
+                if (gg.airplane.AirplaneConfig.dearEnabled) {
+                    Vec3 playerVec = player.position();
+                    Vec3 entityVec = entity.position();
+                    double diffX = playerVec.x - entityVec.x, diffY = playerVec.y - entityVec.y, diffZ = playerVec.z - entityVec.z;
+                    int squaredDistance = (int) (diffX * diffX + diffY * diffY + diffZ * diffZ);
+                    entity.activatedPriority = squaredDistance > gg.airplane.AirplaneConfig.startDistanceSquared ?
+                      Math.max(1, Math.min(squaredDistance >> gg.airplane.AirplaneConfig.activationDistanceMod, gg.airplane.AirplaneConfig.maximumActivationPrio)) :
+                      1;
+                } else {
+                    entity.activatedPriority = 1;
+                }
+                // Airplane end
+
             }
             // Tuinity end
         }
@@ -228,12 +247,12 @@ public class ActivationRange
         if ( MinecraftServer.currentTick > entity.activatedTick )
         {
             if ( entity.defaultActivationState )
-            {
+            { // Airplane - diff on change
                 entity.activatedTick = MinecraftServer.currentTick;
                 return;
             }
             if ( entity.activationType.boundingBox.intersects( entity.getBoundingBox() ) )
-            {
+            {  // Airplane - diff on change
                 entity.activatedTick = MinecraftServer.currentTick;
             }
         }
