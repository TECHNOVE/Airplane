From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul Sauve <paul@technove.co>
Date: Sat, 13 Mar 2021 10:40:22 -0600
Subject: [PATCH] Remove entity ticking chunk check on entity tick


diff --git a/src/main/java/net/minecraft/server/level/PlayerChunk.java b/src/main/java/net/minecraft/server/level/PlayerChunk.java
index 86f156587a0939b28c5cf6f64907255c1c4f8b35..516b77edab4d737fa947e051c463bbd65d0e9e49 100644
--- a/src/main/java/net/minecraft/server/level/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/level/PlayerChunk.java
@@ -269,6 +269,23 @@ public class PlayerChunk {
         return either == null ? null : either.left().orElse(null);
     }
 
+    // Aeroplane start - update entity ticking on entities
+    private void setEntityTickingReady(boolean isEntityTickingReady) {
+        this.isEntityTickingReady = isEntityTickingReady;
+        Chunk chunk = this.getFullReadyChunk();
+        if (chunk != null) {
+            // update all entities in chunk
+            List<net.minecraft.world.entity.Entity>[] entitySlices = chunk.getEntitySlices();
+            for (int i = 0, entitySlicesLength = entitySlices.length; i < entitySlicesLength; i++) {
+                List<net.minecraft.world.entity.Entity> entitySlice = entitySlices[i];
+                for (net.minecraft.world.entity.Entity entity : entitySlice) {
+                    entity.inEntityTickingChunk = isEntityTickingReady;
+                    entity.lastEntityTickingChunkKey = chunk.coordinateKey;
+                }
+            }
+        }
+    }
+    // Aeroplane end
     public final boolean isEntityTickingReady() {
         return this.isEntityTickingReady;
     }
@@ -763,7 +780,10 @@ public class PlayerChunk {
                 if (either.left().isPresent()) {
                     // note: Here is a very good place to add callbacks to logic waiting on this.
                     Chunk entityTickingChunk = either.left().get();
-                    PlayerChunk.this.isEntityTickingReady = true;
+                    // Aeroplane start
+                    //PlayerChunk.this.isEntityTickingReady = true;
+                    PlayerChunk.this.setEntityTickingReady(true);
+                    // Aeroplane end
 
                     // Tuinity start - entity ticking chunk set
                     PlayerChunk.this.chunkMap.world.getChunkProvider().entityTickingChunks.add(entityTickingChunk);
@@ -777,7 +797,7 @@ public class PlayerChunk {
         }
 
         if (flag6 && !flag7) {
-            this.entityTickingFuture.complete(PlayerChunk.UNLOADED_CHUNK); this.isEntityTickingReady = false; // Paper - cache chunk ticking stage
+            this.entityTickingFuture.complete(PlayerChunk.UNLOADED_CHUNK); this.setEntityTickingReady(false); /*this.isEntityTickingReady = false;*/ // Paper - cache chunk ticking stage // Aeroplane
             this.entityTickingFuture = PlayerChunk.UNLOADED_CHUNK_FUTURE;
             // Tuinity start - entity ticking chunk set
             Chunk chunkIfCached = this.getFullChunkIfCached();
diff --git a/src/main/java/net/minecraft/server/level/WorldServer.java b/src/main/java/net/minecraft/server/level/WorldServer.java
index ac65773acacd81bdd5875e0a1ad0f5e96ee45b44..3efb096f4d4ead97de39f8e2df93f197f0d84d1a 100644
--- a/src/main/java/net/minecraft/server/level/WorldServer.java
+++ b/src/main/java/net/minecraft/server/level/WorldServer.java
@@ -1083,11 +1083,12 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                 // CraftBukkit end */
 
                 gameprofilerfiller.enter("checkDespawn");
+                boolean entityTickingChunk = false; if (!entity.dead) entityTickingChunk = entity.inEntityTickingChunk; // Aeroplane
                 if (!entity.dead) {
                     entity.checkDespawn();
                     // Tuinity start - optimise notify()
                     if (entity.inChunk && entity.valid) {
-                        if (this.getChunkProvider().isInEntityTickingChunk(entity)) {
+                        if (entityTickingChunk) { // Aeroplane - reuse
                             this.updateNavigatorsInRegion(entity);
                         }
                     } else {
@@ -1113,7 +1114,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                      */
                     boolean doMidTick = false; // usually there's a returns in the catch, so treat it like that
                     try {
-                        this.entityJoinedWorld(entity);
+                        this.entityJoinedWorld(entity, entityTickingChunk); // Aeroplane - reuse
                         doMidTick = true;
                     } catch (Throwable throwable) {
                         if (throwable instanceof ThreadDeath) throw throwable; // Paper
@@ -1138,7 +1139,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                     this.entitiesById.remove(entity.getId()); // Tuinity
                     this.unregisterEntity(entity);
                 } else if (entity.inChunk && entity.valid) { // Tuinity start - optimise notify()
-                    if (this.getChunkProvider().isInEntityTickingChunk(entity)) {
+                    if (entityTickingChunk) { // Aeroplane - reuse
                         this.updateNavigatorsInRegion(entity);
                     }
                 } else {
@@ -1438,7 +1439,9 @@ public class WorldServer extends World implements GeneratorAccessSeed {
     }
     // Tuinity end - log detailed entity tick information
 
-    public void entityJoinedWorld(Entity entity) {
+    // Aeroplane start - reuse check for in entity ticking chunk
+    public void entityJoinedWorld(Entity entity) { entityJoinedWorld(entity, this.getChunkProvider().isInEntityTickingChunk(entity)); }
+    public void entityJoinedWorld(Entity entity, boolean entityTickingChunk) { // Aeroplane end
         // Tuinity start - log detailed entity tick information
         com.tuinity.tuinity.util.TickThread.ensureTickThread("Cannot tick an entity off-main");
         try {
@@ -1446,7 +1449,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                 currentlyTickingEntity.lazySet(entity);
             }
             // Tuinity end - log detailed entity tick information
-        if (!(entity instanceof EntityHuman) && !this.getChunkProvider().a(entity)) {
+        if (!(entity instanceof EntityHuman) && !entityTickingChunk) { // Aeroplane - reuse
             this.chunkCheck(entity);
         } else {
             ++TimingHistory.entityTicks; // Paper - timings
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index c6b4af810fe3bda7797ab94316b2357178c9cd49..52f177a8e4ccf3aa27725f2821af99262e3b6f05 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -291,6 +291,8 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, ne
     public boolean shouldBeRemoved; // Paper
     // Aeroplane start
     public int activatedPriority = gg.aeroplane.AeroplaneConfig.maximumActivationPrio; // golf score
+    public boolean inEntityTickingChunk = false;
+    public long lastEntityTickingChunkKey = Long.MIN_VALUE;
     // Aeroplane end
 
     public float getBukkitYaw() {
diff --git a/src/main/java/net/minecraft/world/level/chunk/Chunk.java b/src/main/java/net/minecraft/world/level/chunk/Chunk.java
index 8f5809756b4fb358f1207c1d61c5cbe6df3fff00..9ba7c5080ce0cacf438bdd6e11f75cb34fbc5759 100644
--- a/src/main/java/net/minecraft/world/level/chunk/Chunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/Chunk.java
@@ -799,6 +799,10 @@ public class Chunk implements IChunkAccess {
         entity.chunkX = this.loc.x;
         entity.chunkY = k;
         entity.chunkZ = this.loc.z;
+        // Aeroplane start
+        entity.inEntityTickingChunk = this.world.getChunkProvider().isInEntityTickingChunk(entity);
+        entity.lastEntityTickingChunkKey = this.coordinateKey;
+        // Aeroplane end
         this.entities.add(entity); // Tuinity
         this.entitySlices[k].add(entity);  // Tuinity
         this.entitySlicesManager.addEntity(entity, k); // Tuinity
